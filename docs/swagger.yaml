basePath: /
definitions:
  handlers.CallNextRequest:
    properties:
      window_number:
        type: integer
    required:
    - window_number
    type: object
  handlers.CompleteAppointmentRequest:
    properties:
      ticket_id:
        example: 1
        type: integer
    required:
    - ticket_id
    type: object
  handlers.ConfirmationRequest:
    description: Запрос подтверждения действия (печать талона или получение электронного)
    properties:
      action:
        example: print_ticket
        type: string
      service_id:
        example: make_appointment
        type: string
    required:
    - action
    - service_id
    type: object
  handlers.ConfirmationResponse:
    description: Ответ после подтверждения действия
    properties:
      message:
        example: Ваш электронный талон
        type: string
      service_name:
        example: Записаться к врачу
        type: string
      ticket_number:
        example: A001
        type: string
      timeout:
        example: 10
        type: integer
    type: object
  handlers.CreateDoctorRequest:
    properties:
      full_name:
        type: string
      login:
        type: string
      password:
        type: string
      specialization:
        type: string
    required:
    - full_name
    - login
    - password
    - specialization
    type: object
  handlers.CreateRegistrarRequest:
    properties:
      login:
        type: string
      password:
        type: string
      window_number:
        type: integer
    required:
    - login
    - password
    - window_number
    type: object
  handlers.DoctorScreenResponse:
    properties:
      cabinet_number:
        type: integer
      doctor_name:
        type: string
      doctor_specialty:
        type: string
      message:
        type: string
      queue:
        items:
          $ref: '#/definitions/models.DoctorQueueTicketResponse'
        type: array
    type: object
  handlers.LoginRequest:
    properties:
      login:
        type: string
      password:
        type: string
    required:
    - login
    - password
    type: object
  handlers.ServiceSelectionRequest:
    description: Запрос для выбора услуги
    properties:
      service_id:
        example: make_appointment
        type: string
    required:
    - service_id
    type: object
  handlers.ServiceSelectionResponse:
    description: Ответ после выбора услуги
    properties:
      action:
        example: confirm_print
        type: string
      service_name:
        example: Записаться к врачу
        type: string
    type: object
  handlers.StartAppointmentRequest:
    properties:
      ticket_id:
        example: 1
        type: integer
    required:
    - ticket_id
    type: object
  handlers.UpdateStatusRequest:
    description: Запрос для смены статуса тикета
    properties:
      status:
        type: string
    required:
    - status
    type: object
  models.Appointment:
    properties:
      created_at:
        type: string
      id:
        type: integer
      patient:
        $ref: '#/definitions/models.Patient'
      patient_id:
        type: integer
      schedule:
        $ref: '#/definitions/models.Schedule'
      schedule_id:
        type: integer
      ticket:
        $ref: '#/definitions/models.Ticket'
      ticket_id:
        type: integer
    type: object
  models.CreateAppointmentRequest:
    properties:
      patient_id:
        type: integer
      schedule_id:
        type: integer
      ticket_id:
        type: integer
    required:
    - patient_id
    - schedule_id
    type: object
  models.CreatePatientRequest:
    properties:
      birth_date:
        type: string
      full_name:
        type: string
      oms_number:
        type: string
      passport_number:
        type: string
      passport_series:
        type: string
      phone:
        type: string
    required:
    - birth_date
    - full_name
    - oms_number
    - passport_number
    - passport_series
    type: object
  models.DeleteRequest:
    properties:
      filters:
        $ref: '#/definitions/models.Filters'
    required:
    - filters
    type: object
  models.Doctor:
    properties:
      full_name:
        type: string
      id:
        type: integer
      is_active:
        type: boolean
      login:
        type: string
      schedules:
        items:
          $ref: '#/definitions/models.Schedule'
        type: array
      specialization:
        type: string
    type: object
  models.DoctorQueueTicketResponse:
    properties:
      patient_full_name:
        type: string
      start_time:
        type: string
      status:
        $ref: '#/definitions/models.TicketStatus'
      ticket_number:
        type: string
    type: object
  models.FilterCondition:
    properties:
      field:
        type: string
      operator:
        type: string
      value: {}
    type: object
  models.Filters:
    properties:
      conditions:
        items:
          $ref: '#/definitions/models.FilterCondition'
        type: array
      logical_operator:
        type: string
    type: object
  models.GetDataRequest:
    properties:
      filters:
        $ref: '#/definitions/models.Filters'
      limit:
        type: integer
      page:
        type: integer
    type: object
  models.InsertRequest:
    properties:
      data: {}
    required:
    - data
    type: object
  models.Patient:
    properties:
      birth_date:
        type: string
      full_name:
        type: string
      id:
        type: integer
      oms_number:
        type: string
      passport_number:
        type: string
      passport_series:
        type: string
      phone:
        type: string
    type: object
  models.Schedule:
    properties:
      cabinet:
        type: integer
      date:
        type: string
      doctor:
        $ref: '#/definitions/models.Doctor'
      doctor_id:
        type: integer
      end_time:
        type: string
      is_available:
        type: boolean
      schedule_id:
        type: integer
      start_time:
        type: string
    type: object
  models.ScheduleWithAppointmentInfo:
    properties:
      appointment:
        $ref: '#/definitions/models.Appointment'
      cabinet:
        type: integer
      date:
        type: string
      doctor:
        $ref: '#/definitions/models.Doctor'
      doctor_id:
        type: integer
      end_time:
        type: string
      is_available:
        type: boolean
      schedule_id:
        type: integer
      start_time:
        type: string
    type: object
  models.Service:
    properties:
      id:
        type: string
      letter:
        type: string
      title:
        type: string
    type: object
  models.Ticket:
    description: Модель талона электронной очереди
    properties:
      called_at:
        type: string
      completed_at:
        type: string
      created_at:
        type: string
      id:
        type: integer
      qr_code:
        items:
          type: integer
        type: array
      service_type:
        type: string
      started_at:
        type: string
      status:
        $ref: '#/definitions/models.TicketStatus'
      ticket_number:
        type: string
      window_number:
        type: integer
    type: object
  models.TicketResponse:
    description: Ответ API с данными талона
    properties:
      called_at:
        type: string
      completed_at:
        type: string
      created_at:
        type: string
      id:
        type: integer
      qr_code:
        items:
          type: integer
        type: array
      service_type:
        type: string
      started_at:
        type: string
      status:
        $ref: '#/definitions/models.TicketStatus'
      ticket_number:
        type: string
      window_number:
        type: integer
    type: object
  models.TicketStatus:
    enum:
    - ожидает
    - приглашен
    - на_приеме
    - завершен
    - зарегистрирован
    type: string
    x-enum-comments:
      StatusInvited: Пациент вызван к окну
    x-enum-descriptions:
    - Пациент вызван к окну
    x-enum-varnames:
    - StatusWaiting
    - StatusInvited
    - StatusInProgress
    - StatusCompleted
    - StatusRegistered
  models.UpdateRequest:
    properties:
      data:
        additionalProperties: true
        type: object
      filters:
        $ref: '#/definitions/models.Filters'
    required:
    - data
    - filters
    type: object
host: localhost:8080
info:
  contact: {}
  description: API для системы электронной очереди
  title: Electronic Queue API
  version: "1.0"
paths:
  /api/audio/announce:
    get:
      description: Создает и возвращает WAV файл с озвучкой номера талона и окна.
      parameters:
      - description: Номер талона (например, A007 или C21)
        in: query
        name: ticket
        required: true
        type: string
      - description: Номер окна (например, 5)
        in: query
        name: window
        required: true
        type: string
      produces:
      - audio/wav
      responses:
        "200":
          description: WAV файл оповещения
          schema:
            type: file
        "400":
          description: 'Ошибка: неверные параметры'
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Внутренняя ошибка сервера
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Сгенерировать звуковое оповещение
      tags:
      - audio
  /api/auth/create/doctor:
    post:
      consumes:
      - application/json
      description: Создает нового пользователя с ролью "врач". Требует INTERNAL_API_KEY.
      parameters:
      - description: Данные нового врача
        in: body
        name: credentials
        required: true
        schema:
          $ref: '#/definitions/handlers.CreateDoctorRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Врач успешно создан
          schema:
            additionalProperties: true
            type: object
        "400":
          description: 'Ошибка: неверный запрос'
          schema:
            additionalProperties:
              type: string
            type: object
        "409":
          description: 'Ошибка: логин уже занят'
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - ApiKeyAuth: []
      summary: Создать нового врача (Админ)
      tags:
      - auth
  /api/auth/create/registrar:
    post:
      consumes:
      - application/json
      description: Создает нового пользователя с ролью "регистратор". Требует INTERNAL_API_KEY.
      parameters:
      - description: Данные нового регистратора
        in: body
        name: credentials
        required: true
        schema:
          $ref: '#/definitions/handlers.CreateRegistrarRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Регистратор успешно создан
          schema:
            additionalProperties: true
            type: object
        "400":
          description: 'Ошибка: неверный запрос'
          schema:
            additionalProperties:
              type: string
            type: object
        "409":
          description: 'Ошибка: логин уже занят'
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - ApiKeyAuth: []
      summary: Создать нового регистратора (Админ)
      tags:
      - auth
  /api/auth/login/doctor:
    post:
      consumes:
      - application/json
      description: Принимает логин и пароль, возвращает JWT токен и информацию о враче.
      parameters:
      - description: Учетные данные
        in: body
        name: credentials
        required: true
        schema:
          $ref: '#/definitions/handlers.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Успешный ответ с токеном и данными врача
          schema:
            additionalProperties: true
            type: object
        "400":
          description: 'Ошибка: неверный запрос'
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: 'Ошибка: неверные учетные данные'
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Аутентификация врача
      tags:
      - auth
  /api/auth/login/registrar:
    post:
      consumes:
      - application/json
      description: Принимает логин и пароль, возвращает JWT токен.
      parameters:
      - description: Учетные данные
        in: body
        name: credentials
        required: true
        schema:
          $ref: '#/definitions/handlers.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Успешный ответ с токеном
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: 'Ошибка: неверный запрос'
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: 'Ошибка: неверные учетные данные'
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Аутентификация регистратора
      tags:
      - auth
  /api/database/{table}/delete:
    delete:
      consumes:
      - application/json
      description: Позволяет удалить записи из указанной таблицы по заданным фильтрам.
      parameters:
      - description: Имя таблицы для удаления (e.g., tickets, doctors)
        in: path
        name: table
        required: true
        type: string
      - description: Фильтры для удаления
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.DeleteRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Данные успешно удалены
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Ошибка в запросе (например, удаление без фильтров)
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Отсутствует ключ API
          schema:
            additionalProperties:
              type: string
            type: object
        "403":
          description: Неверный ключ API
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Внутренняя ошибка сервера
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - ApiKeyAuth: []
      summary: Удаление данных из таблицы
      tags:
      - database
  /api/database/{table}/insert:
    post:
      consumes:
      - application/json
      description: Позволяет вставить одну или несколько записей в указанную таблицу.
      parameters:
      - description: Имя таблицы для вставки (e.g., services, doctors)
        in: path
        name: table
        required: true
        type: string
      - description: Данные для вставки
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.InsertRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Данные успешно вставлены
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Ошибка в запросе
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Отсутствует ключ API
          schema:
            additionalProperties:
              type: string
            type: object
        "403":
          description: Неверный ключ API
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Внутренняя ошибка сервера
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - ApiKeyAuth: []
      summary: Вставка данных в таблицу
      tags:
      - database
  /api/database/{table}/select:
    post:
      consumes:
      - application/json
      description: Позволяет получить данные из указанной таблицы с фильтрацией и
        пагинацией.
      parameters:
      - description: Имя таблицы для получения данных (e.g., tickets, doctors)
        in: path
        name: table
        required: true
        type: string
      - description: Фильтры и параметры пагинации
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.GetDataRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Успешный ответ с данными
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Ошибка в запросе (неверная таблица, поле или оператор)
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Отсутствует ключ API
          schema:
            additionalProperties:
              type: string
            type: object
        "403":
          description: Неверный ключ API
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Внутренняя ошибка сервера
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - ApiKeyAuth: []
      summary: Получение данных из таблицы
      tags:
      - database
  /api/database/{table}/update:
    patch:
      consumes:
      - application/json
      description: Позволяет обновить записи в указанной таблице по заданным фильтрам.
      parameters:
      - description: Имя таблицы для обновления (e.g., tickets, doctors)
        in: path
        name: table
        required: true
        type: string
      - description: Данные и фильтры для обновления
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.UpdateRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Данные успешно обновлены
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Ошибка в запросе (например, обновление без фильтров)
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Отсутствует ключ API
          schema:
            additionalProperties:
              type: string
            type: object
        "403":
          description: Неверный ключ API
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Внутренняя ошибка сервера
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - ApiKeyAuth: []
      summary: Обновление данных в таблице
      tags:
      - database
  /api/doctor/active:
    get:
      description: Возвращает список всех врачей, у которых is_active = true. Используется
        для заполнения выпадающих списков на клиенте.
      produces:
      - application/json
      responses:
        "200":
          description: Массив моделей врачей
          schema:
            items:
              $ref: '#/definitions/models.Doctor'
            type: array
        "500":
          description: Внутренняя ошибка сервера
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - ApiKeyAuth: []
      summary: Получить список активных врачей
      tags:
      - doctor
  /api/doctor/cabinets/active:
    get:
      description: Возвращает список всех уникальных номеров кабинетов, когда-либо
        существовавших в расписании.
      produces:
      - application/json
      responses:
        "200":
          description: Массив номеров кабинетов
          schema:
            items:
              type: integer
            type: array
        "500":
          description: Внутренняя ошибка сервера
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Получить список всех существующих кабинетов
      tags:
      - doctor
  /api/doctor/complete-appointment:
    post:
      consumes:
      - application/json
      description: Завершает прием пациента по талону. Статус талона должен быть 'на_приеме'.
      parameters:
      - description: Данные для завершения приема
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/handlers.CompleteAppointmentRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Appointment completed successfully
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Неверный запрос или статус талона
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Завершить прием пациента
      tags:
      - doctor
  /api/doctor/screen-updates/{cabinet_number}:
    get:
      description: Отправляет начальное состояние и последующие обновления статуса
        приема через Server-Sent Events для конкретного кабинета.
      parameters:
      - description: Номер кабинета
        in: path
        name: cabinet_number
        required: true
        type: integer
      produces:
      - text/event-stream
      responses:
        "200":
          description: Поток событий (см. реальную структуру ответа в коде)
          schema:
            $ref: '#/definitions/handlers.DoctorScreenResponse'
        "400":
          description: Неверный формат номера кабинета
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Получить обновления для табло врача
      tags:
      - doctor
  /api/doctor/start-appointment:
    post:
      consumes:
      - application/json
      description: Начинает прием пациента по талону. Статус талона должен быть 'зарегистрирован'.
      parameters:
      - description: Данные для начала приема
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/handlers.StartAppointmentRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Appointment started successfully
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Неверный запрос или статус талона
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Начать прием пациента
      tags:
      - doctor
  /api/doctor/tickets/in-progress:
    get:
      description: Возвращает список талонов со статусом "на_приеме". Обычно это один
        талон.
      produces:
      - application/json
      responses:
        "200":
          description: Список талонов
          schema:
            items:
              $ref: '#/definitions/models.TicketResponse'
            type: array
        "500":
          description: Внутренняя ошибка сервера
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Получить талоны на приеме
      tags:
      - doctor
  /api/doctor/tickets/registered:
    get:
      description: Возвращает список талонов со статусом "зарегистрирован", т.е. очередь
        непосредственно к врачу.
      produces:
      - application/json
      responses:
        "200":
          description: Список талонов
          schema:
            items:
              $ref: '#/definitions/models.TicketResponse'
            type: array
        "500":
          description: Внутренняя ошибка сервера
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Получить очередь к врачу
      tags:
      - doctor
  /api/registrar/appointments:
    post:
      consumes:
      - application/json
      description: Создает новую запись на прием для пациента, связывая ее со слотом
        в расписании и исходным талоном. Обновляет слот как занятый.
      parameters:
      - description: Данные для создания записи
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.CreateAppointmentRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Успешно созданная запись
          schema:
            $ref: '#/definitions/models.Appointment'
        "400":
          description: 'Ошибка: неверный формат запроса'
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Внутренняя ошибка сервера (например, слот уже занят)
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - ApiKeyAuth: []
      summary: Создать новую запись на прием
      tags:
      - registrar
  /api/registrar/call-next:
    post:
      consumes:
      - application/json
      description: Находит первого пациента в очереди, меняет его статус на "приглашен"
        и присваивает номер окна
      parameters:
      - description: Номер окна, которое вызывает пациента
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/handlers.CallNextRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Данные вызванного талона
          schema:
            $ref: '#/definitions/models.TicketResponse'
        "400":
          description: 'Ошибка: неверный номер окна'
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: 'Ошибка: очередь пуста'
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Внутренняя ошибка сервера
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Вызвать следующего пациента
      tags:
      - registrar
  /api/registrar/patients:
    post:
      consumes:
      - application/json
      description: Создает новую запись о пациенте в базе данных. Используется, когда
        пациент не найден через поиск.
      parameters:
      - description: Данные нового пациента
        in: body
        name: patient
        required: true
        schema:
          $ref: '#/definitions/models.CreatePatientRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Успешно созданный пациент
          schema:
            $ref: '#/definitions/models.Patient'
        "400":
          description: 'Ошибка: неверный формат запроса'
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Внутренняя ошибка сервера
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - ApiKeyAuth: []
      summary: Создать нового пациента
      tags:
      - registrar
  /api/registrar/patients/search:
    get:
      description: Ищет пациентов по частичному совпадению в ФИО, номере полиса ОМС
        или полному номеру паспорта (серия + номер без пробелов). Возвращает до 10
        совпадений.
      parameters:
      - description: Строка для поиска (минимум 2 символа)
        in: query
        name: query
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Массив найденных пациентов
          schema:
            items:
              $ref: '#/definitions/models.Patient'
            type: array
        "400":
          description: 'Ошибка: отсутствует или слишком короткий параметр поиска'
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Внутренняя ошибка сервера
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - ApiKeyAuth: []
      summary: Поиск пациентов по ФИО, ОМС или паспорту
      tags:
      - registrar
  /api/registrar/schedules/doctor/{doctor_id}:
    get:
      description: Возвращает все временные слоты врача на указанную дату, включая
        информацию о том, кто записан в занятые слоты.
      parameters:
      - description: ID Врача
        in: path
        name: doctor_id
        required: true
        type: integer
      - description: Дата в формате YYYY-MM-DD
        in: query
        name: date
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Массив слотов расписания с информацией о записях
          schema:
            items:
              $ref: '#/definitions/models.ScheduleWithAppointmentInfo'
            type: array
        "400":
          description: 'Ошибка: неверный ID или формат даты'
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Внутренняя ошибка сервера
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - ApiKeyAuth: []
      summary: Получить расписание врача с информацией о записях
      tags:
      - registrar
  /api/registrar/tickets/{id}:
    delete:
      consumes:
      - application/json
      description: Удаляет тикет по ID
      parameters:
      - description: ID тикета
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Тикет удален
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Ошибка запроса
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Тикет не найден
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Внутренняя ошибка сервера
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Удалить тикет
      tags:
      - registrar
  /api/registrar/tickets/{id}/status:
    patch:
      consumes:
      - application/json
      description: Изменяет статус тикета по ID
      parameters:
      - description: ID тикета
        in: path
        name: id
        required: true
        type: integer
      - description: Новый статус
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/handlers.UpdateStatusRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Статус обновлен
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Ошибка запроса
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Тикет не найден
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Внутренняя ошибка сервера
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Сменить статус тикета
      tags:
      - registrar
  /api/tickets/active:
    get:
      description: Возвращает список всех талонов в статусе 'ожидает' и 'приглашен'
        для первоначальной загрузки табло.
      produces:
      - application/json
      responses:
        "200":
          description: Список активных талонов
          schema:
            items:
              $ref: '#/definitions/models.TicketResponse'
            type: array
        "500":
          description: Внутренняя ошибка сервера
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Получить все активные талоны
      tags:
      - tickets
  /api/tickets/download/{ticket_number}:
    get:
      description: Позволяет скачать изображение талона по номеру
      parameters:
      - description: Номер талона
        in: path
        name: ticket_number
        required: true
        type: string
      produces:
      - image/png
      responses:
        "200":
          description: Изображение талона
          schema:
            type: file
        "400":
          description: 'Ошибка: не передан ticket_number'
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Талон не найден
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Скачать изображение талона
      tags:
      - tickets
  /api/tickets/print/confirmation:
    post:
      consumes:
      - application/json
      description: Обрабатывает подтверждение действия (печать талона или получение
        электронного)
      parameters:
      - description: Данные для подтверждения действия
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/handlers.ConfirmationRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Ответ после подтверждения действия
          schema:
            $ref: '#/definitions/handlers.ConfirmationResponse'
        "400":
          description: 'Ошибка: не передан service_id или action'
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Внутренняя ошибка сервера
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Подтверждение действия
      tags:
      - tickets
  /api/tickets/print/selection:
    post:
      consumes:
      - application/json
      description: Определяет следующий шаг после выбора услуги
      parameters:
      - description: Данные для выбора услуги
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/handlers.ServiceSelectionRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Следующий шаг после выбора услуги
          schema:
            $ref: '#/definitions/handlers.ServiceSelectionResponse'
        "400":
          description: 'Ошибка: не передан service_id'
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Выбор услуги
      tags:
      - tickets
  /api/tickets/services:
    get:
      consumes:
      - application/json
      description: Возвращает список доступных услуг
      produces:
      - application/json
      responses:
        "200":
          description: Список услуг
          schema:
            additionalProperties:
              items:
                $ref: '#/definitions/models.Service'
              type: array
            type: object
      summary: Получить список услуг
      tags:
      - tickets
  /api/tickets/start:
    get:
      consumes:
      - application/json
      description: Возвращает стартовую информацию для клиента (например, текст кнопки)
      produces:
      - application/json
      responses:
        "200":
          description: 'Успешный ответ: текст кнопки'
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Получить стартовую информацию
      tags:
      - tickets
  /api/tickets/view/{ticket_number}:
    get:
      description: Позволяет просмотреть изображение талона в браузере по номеру
      parameters:
      - description: Номер талона
        in: path
        name: ticket_number
        required: true
        type: string
      produces:
      - image/png
      responses:
        "200":
          description: Изображение талона
          schema:
            type: file
        "400":
          description: 'Ошибка: не передан ticket_number'
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Талон не найден
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Просмотр изображения талона
      tags:
      - tickets
securityDefinitions:
  ApiKeyAuth:
    in: header
    name: X-API-KEY
    type: apiKey
swagger: "2.0"
