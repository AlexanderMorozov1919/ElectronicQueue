{
    "swagger": "2.0",
    "info": {
        "description": "API для системы электронной очереди",
        "title": "Electronic Queue API",
        "contact": {},
        "version": "1.0"
    },
    "host": "localhost:8080",
    "basePath": "/",
    "paths": {
        "/api/admin/create/doctor": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Создает нового пользователя с ролью \"врач\". Требует INTERNAL_API_KEY.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "admin"
                ],
                "summary": "Создать нового врача (Админ)",
                "parameters": [
                    {
                        "description": "Данные нового врача",
                        "name": "credentials",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.CreateDoctorRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Врач успешно создан",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Ошибка: неверный запрос",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "409": {
                        "description": "Ошибка: логин уже занят",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/api/admin/create/registrar": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Создает нового пользователя с ролью \"регистратор\". Требует INTERNAL_API_KEY.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "admin"
                ],
                "summary": "Создать нового регистратора (Админ)",
                "parameters": [
                    {
                        "description": "Данные нового регистратора",
                        "name": "credentials",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.CreateRegistrarRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Регистратор успешно создан",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Ошибка: неверный запрос",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "409": {
                        "description": "Ошибка: логин уже занят",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/api/admin/schedules": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Создает новый временной слот для врача. Требует INTERNAL_API_KEY.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "admin"
                ],
                "summary": "Создать слот в расписании (Админ)",
                "parameters": [
                    {
                        "description": "Данные для создания слота",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.CreateScheduleRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Успешно созданный слот",
                        "schema": {
                            "$ref": "#/definitions/models.Schedule"
                        }
                    },
                    "400": {
                        "description": "Ошибка: неверный формат запроса",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "401": {
                        "description": "Отсутствует ключ API",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "403": {
                        "description": "Неверный ключ API",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Внутренняя ошибка сервера",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/api/admin/schedules/{id}": {
            "delete": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Удаляет временной слот из расписания по его ID. Требует INTERNAL_API_KEY.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "admin"
                ],
                "summary": "Удалить слот из расписания (Админ)",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "ID слота расписания",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Слот успешно удален",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "400": {
                        "description": "Ошибка: неверный ID",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "401": {
                        "description": "Отсутствует ключ API",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "403": {
                        "description": "Неверный ключ API",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "404": {
                        "description": "Слот не найден",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Внутренняя ошибка сервера",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/api/admin/tickets/{id}": {
            "delete": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Удаляет тикет по ID. Требует INTERNAL_API_KEY.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "admin"
                ],
                "summary": "Удалить тикет (Админ)",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "ID тикета",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Тикет удален",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "400": {
                        "description": "Ошибка запроса",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "401": {
                        "description": "Отсутствует ключ API",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "403": {
                        "description": "Неверный ключ API",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "404": {
                        "description": "Тикет не найден",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Внутренняя ошибка сервера",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/api/audio/announce": {
            "get": {
                "description": "Создает и возвращает WAV файл с озвучкой номера талона и окна.",
                "produces": [
                    "audio/wav"
                ],
                "tags": [
                    "audio"
                ],
                "summary": "Сгенерировать звуковое оповещение",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Номер талона (например, A007 или C21)",
                        "name": "ticket",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Номер окна (например, 5)",
                        "name": "window",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "WAV файл оповещения",
                        "schema": {
                            "type": "file"
                        }
                    },
                    "400": {
                        "description": "Ошибка: неверные параметры",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Внутренняя ошибка сервера",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/api/auth/login/doctor": {
            "post": {
                "description": "Принимает логин и пароль, возвращает JWT токен и информацию о враче.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Аутентификация врача",
                "parameters": [
                    {
                        "description": "Учетные данные",
                        "name": "credentials",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.LoginRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Успешный ответ с токеном и данными врача",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Ошибка: неверный запрос",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "401": {
                        "description": "Ошибка: неверные учетные данные",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/api/auth/login/registrar": {
            "post": {
                "description": "Принимает логин и пароль, возвращает JWT токен.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Аутентификация регистратора",
                "parameters": [
                    {
                        "description": "Учетные данные",
                        "name": "credentials",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.LoginRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Успешный ответ с токеном",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "400": {
                        "description": "Ошибка: неверный запрос",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "401": {
                        "description": "Ошибка: неверные учетные данные",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/api/database/{table}/delete": {
            "delete": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Позволяет удалить записи из указанной таблицы по заданным фильтрам.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "database"
                ],
                "summary": "Удаление данных из таблицы",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Имя таблицы для удаления (e.g., tickets, doctors)",
                        "name": "table",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Фильтры для удаления",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.DeleteRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Данные успешно удалены",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Ошибка в запросе (например, удаление без фильтров)",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "401": {
                        "description": "Отсутствует ключ API",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "403": {
                        "description": "Неверный ключ API",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Внутренняя ошибка сервера",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/api/database/{table}/insert": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Позволяет вставить одну или несколько записей в указанную таблицу.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "database"
                ],
                "summary": "Вставка данных в таблицу",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Имя таблицы для вставки (e.g., services, doctors)",
                        "name": "table",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Данные для вставки",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.InsertRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Данные успешно вставлены",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Ошибка в запросе",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "401": {
                        "description": "Отсутствует ключ API",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "403": {
                        "description": "Неверный ключ API",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Внутренняя ошибка сервера",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/api/database/{table}/select": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Позволяет получить данные из указанной таблицы с фильтрацией и пагинацией.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "database"
                ],
                "summary": "Получение данных из таблицы",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Имя таблицы для получения данных (e.g., tickets, doctors)",
                        "name": "table",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Фильтры и параметры пагинации",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.GetDataRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Успешный ответ с данными",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Ошибка в запросе (неверная таблица, поле или оператор)",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "401": {
                        "description": "Отсутствует ключ API",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "403": {
                        "description": "Неверный ключ API",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Внутренняя ошибка сервера",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/api/database/{table}/update": {
            "patch": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Позволяет обновить записи в указанной таблице по заданным фильтрам.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "database"
                ],
                "summary": "Обновление данных в таблице",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Имя таблицы для обновления (e.g., tickets, doctors)",
                        "name": "table",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Данные и фильтры для обновления",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.UpdateRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Данные успешно обновлены",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Ошибка в запросе (например, обновление без фильтров)",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "401": {
                        "description": "Отсутствует ключ API",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "403": {
                        "description": "Неверный ключ API",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Внутренняя ошибка сервера",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/api/doctor/active": {
            "get": {
                "description": "Возвращает список всех врачей, у которых is_active = true. Используется для заполнения выпадающих списков на клиенте.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "doctor"
                ],
                "summary": "Получить список активных врачей",
                "responses": {
                    "200": {
                        "description": "Массив моделей врачей",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.Doctor"
                            }
                        }
                    },
                    "500": {
                        "description": "Внутренняя ошибка сервера",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/api/doctor/cabinets/active": {
            "get": {
                "description": "Возвращает список всех уникальных номеров кабинетов, когда-либо существовавших в расписании.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "doctor"
                ],
                "summary": "Получить список всех существующих кабинетов",
                "responses": {
                    "200": {
                        "description": "Массив номеров кабинетов",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "integer"
                            }
                        }
                    },
                    "500": {
                        "description": "Внутренняя ошибка сервера",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/api/doctor/complete-appointment": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Завершает прием пациента по талону. Статус талона должен быть 'на_приеме'.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "doctor"
                ],
                "summary": "Завершить прием пациента",
                "parameters": [
                    {
                        "description": "Данные для завершения приема",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.CompleteAppointmentRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Appointment completed successfully",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Неверный запрос или статус талона",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/api/doctor/end-break": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Завершает перерыв врача. Статус врача должен быть 'перерыв'.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "doctor"
                ],
                "summary": "Завершить перерыв врача",
                "parameters": [
                    {
                        "description": "Данные для завершения перерыва",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.EndBreakRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Break ended successfully",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "400": {
                        "description": "Неверный запрос или статус врача",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/api/doctor/screen-updates/{cabinet_number}": {
            "get": {
                "description": "Отправляет начальное состояние и последующие обновления статуса приема через Server-Sent Events для конкретного кабинета.",
                "produces": [
                    "text/event-stream"
                ],
                "tags": [
                    "doctor"
                ],
                "summary": "Получить обновления для табло врача",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Номер кабинета",
                        "name": "cabinet_number",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Поток событий (см. реальную структуру ответа в коде)",
                        "schema": {
                            "$ref": "#/definitions/handlers.DoctorScreenResponse"
                        }
                    },
                    "400": {
                        "description": "Неверный формат номера кабинета",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/api/doctor/set-active": {
            "post": {
                "description": "Устанавливает статус врача как активный (при входе в систему).",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "doctor"
                ],
                "summary": "Установить статус врача как активный",
                "parameters": [
                    {
                        "description": "Данные для установки статуса",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.SetActiveRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Doctor status set to active",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "400": {
                        "description": "Неверный запрос",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/api/doctor/set-inactive": {
            "post": {
                "description": "Устанавливает статус врача как неактивный (при выходе из системы).",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "doctor"
                ],
                "summary": "Установить статус врача как неактивный",
                "parameters": [
                    {
                        "description": "Данные для установки статуса",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.SetInactiveRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Doctor status set to inactive",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "400": {
                        "description": "Неверный запрос",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/api/doctor/start-appointment": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Начинает прием пациента по талону. Статус талона должен быть 'зарегистрирован'.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "doctor"
                ],
                "summary": "Начать прием пациента",
                "parameters": [
                    {
                        "description": "Данные для начала приема",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.StartAppointmentRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Appointment started successfully",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Неверный запрос или статус талона",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/api/doctor/start-break": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Начинает перерыв врача. Статус врача должен быть 'активен'.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "doctor"
                ],
                "summary": "Начать перерыв врача",
                "parameters": [
                    {
                        "description": "Данные для начала перерыва",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.StartBreakRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Break started successfully",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "400": {
                        "description": "Неверный запрос или статус врача",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/api/doctor/tickets/in-progress": {
            "get": {
                "description": "Возвращает список талонов со статусом \"на_приеме\". Обычно это один талон.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "doctor"
                ],
                "summary": "Получить талоны на приеме",
                "responses": {
                    "200": {
                        "description": "Список талонов",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.TicketResponse"
                            }
                        }
                    },
                    "500": {
                        "description": "Внутренняя ошибка сервера",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/api/doctor/tickets/registered": {
            "get": {
                "description": "Возвращает список талонов со статусом \"зарегистрирован\", т.е. очередь непосредственно к врачу.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "doctor"
                ],
                "summary": "Получить очередь к врачу",
                "responses": {
                    "200": {
                        "description": "Список талонов",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.TicketResponse"
                            }
                        }
                    },
                    "500": {
                        "description": "Внутренняя ошибка сервера",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/api/registrar/appointments": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Создает новую запись на прием для пациента, связывая ее со слотом в расписании и исходным талоном. Обновляет слот как занятый.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "registrar"
                ],
                "summary": "Создать новую запись на прием",
                "parameters": [
                    {
                        "description": "Данные для создания записи",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.CreateAppointmentRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Успешно созданная запись",
                        "schema": {
                            "$ref": "#/definitions/models.Appointment"
                        }
                    },
                    "400": {
                        "description": "Ошибка: неверный формат запроса",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Внутренняя ошибка сервера (например, слот уже занят)",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/api/registrar/call-next": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Находит первого пациента в очереди, меняет его статус на \"приглашен\" и присваивает номер окна",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "registrar"
                ],
                "summary": "Вызвать следующего пациента",
                "parameters": [
                    {
                        "description": "Номер окна, которое вызывает пациента",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.CallNextRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Данные вызванного талона",
                        "schema": {
                            "$ref": "#/definitions/models.TicketResponse"
                        }
                    },
                    "400": {
                        "description": "Ошибка: неверный номер окна",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "404": {
                        "description": "Ошибка: очередь пуста",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Внутренняя ошибка сервера",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/api/registrar/patients": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Создает новую запись о пациенте в базе данных. Используется, когда пациент не найден через поиск.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "registrar"
                ],
                "summary": "Создать нового пациента",
                "parameters": [
                    {
                        "description": "Данные нового пациента",
                        "name": "patient",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.CreatePatientRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Успешно созданный пациент",
                        "schema": {
                            "$ref": "#/definitions/models.Patient"
                        }
                    },
                    "400": {
                        "description": "Ошибка: неверный формат запроса",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Внутренняя ошибка сервера",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/api/registrar/patients/search": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Ищет пациентов по частичному совпадению в ФИО, номере полиса ОМС или полному номеру паспорта (серия + номер без пробелов). Возвращает до 10 совпадений.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "registrar"
                ],
                "summary": "Поиск пациентов по ФИО, ОМС или паспорту",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Строка для поиска (минимум 2 символа)",
                        "name": "query",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Массив найденных пациентов",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.Patient"
                            }
                        }
                    },
                    "400": {
                        "description": "Ошибка: отсутствует или слишком короткий параметр поиска",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Внутренняя ошибка сервера",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/api/registrar/schedules/doctor/{doctor_id}": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Возвращает все временные слоты врача на указанную дату, включая информацию о том, кто записан в занятые слоты.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "registrar"
                ],
                "summary": "Получить расписание врача с информацией о записях",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "ID Врача",
                        "name": "doctor_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Дата в формате YYYY-MM-DD",
                        "name": "date",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Массив слотов расписания с информацией о записях",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.ScheduleWithAppointmentInfo"
                            }
                        }
                    },
                    "400": {
                        "description": "Ошибка: неверный ID или формат даты",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Внутренняя ошибка сервера",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/api/registrar/tickets/{id}/status": {
            "patch": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Изменяет статус тикета по ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "registrar"
                ],
                "summary": "Сменить статус тикета",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "ID тикета",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Новый статус",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.UpdateStatusRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Статус обновлен",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "400": {
                        "description": "Ошибка запроса",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "404": {
                        "description": "Тикет не найден",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Внутренняя ошибка сервера",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/api/tickets/active": {
            "get": {
                "description": "Возвращает список всех талонов в статусе 'ожидает' и 'приглашен' для первоначальной загрузки табло.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "tickets"
                ],
                "summary": "Получить все активные талоны",
                "responses": {
                    "200": {
                        "description": "Список активных талонов",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.TicketResponse"
                            }
                        }
                    },
                    "500": {
                        "description": "Внутренняя ошибка сервера",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/api/tickets/download/{ticket_number}": {
            "get": {
                "description": "Позволяет скачать изображение талона по номеру",
                "produces": [
                    "image/png"
                ],
                "tags": [
                    "tickets"
                ],
                "summary": "Скачать изображение талона",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Номер талона",
                        "name": "ticket_number",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Изображение талона",
                        "schema": {
                            "type": "file"
                        }
                    },
                    "400": {
                        "description": "Ошибка: не передан ticket_number",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "404": {
                        "description": "Талон не найден",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/api/tickets/print/confirmation": {
            "post": {
                "description": "Обрабатывает подтверждение действия (печать талона или получение электронного)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "tickets"
                ],
                "summary": "Подтверждение действия",
                "parameters": [
                    {
                        "description": "Данные для подтверждения действия",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.ConfirmationRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ответ после подтверждения действия",
                        "schema": {
                            "$ref": "#/definitions/handlers.ConfirmationResponse"
                        }
                    },
                    "400": {
                        "description": "Ошибка: не передан service_id или action",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Внутренняя ошибка сервера",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/api/tickets/print/selection": {
            "post": {
                "description": "Определяет следующий шаг после выбора услуги",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "tickets"
                ],
                "summary": "Выбор услуги",
                "parameters": [
                    {
                        "description": "Данные для выбора услуги",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.ServiceSelectionRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Следующий шаг после выбора услуги",
                        "schema": {
                            "$ref": "#/definitions/handlers.ServiceSelectionResponse"
                        }
                    },
                    "400": {
                        "description": "Ошибка: не передан service_id",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/api/tickets/services": {
            "get": {
                "description": "Возвращает список доступных услуг",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "tickets"
                ],
                "summary": "Получить список услуг",
                "responses": {
                    "200": {
                        "description": "Список услуг",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/definitions/models.Service"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/tickets/start": {
            "get": {
                "description": "Возвращает стартовую информацию для клиента (например, текст кнопки)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "tickets"
                ],
                "summary": "Получить стартовую информацию",
                "responses": {
                    "200": {
                        "description": "Успешный ответ: текст кнопки",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/api/tickets/view/{ticket_number}": {
            "get": {
                "description": "Позволяет просмотреть изображение талона в браузере по номеру",
                "produces": [
                    "image/png"
                ],
                "tags": [
                    "tickets"
                ],
                "summary": "Просмотр изображения талона",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Номер талона",
                        "name": "ticket_number",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Изображение талона",
                        "schema": {
                            "type": "file"
                        }
                    },
                    "400": {
                        "description": "Ошибка: не передан ticket_number",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "404": {
                        "description": "Талон не найден",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "handlers.CallNextRequest": {
            "type": "object",
            "required": [
                "window_number"
            ],
            "properties": {
                "window_number": {
                    "type": "integer"
                }
            }
        },
        "handlers.CompleteAppointmentRequest": {
            "type": "object",
            "required": [
                "ticket_id"
            ],
            "properties": {
                "ticket_id": {
                    "type": "integer",
                    "example": 1
                }
            }
        },
        "handlers.ConfirmationRequest": {
            "description": "Запрос подтверждения действия (печать талона или получение электронного)",
            "type": "object",
            "required": [
                "action",
                "service_id"
            ],
            "properties": {
                "action": {
                    "type": "string",
                    "example": "print_ticket"
                },
                "service_id": {
                    "type": "string",
                    "example": "make_appointment"
                }
            }
        },
        "handlers.ConfirmationResponse": {
            "description": "Ответ после подтверждения действия",
            "type": "object",
            "properties": {
                "message": {
                    "type": "string",
                    "example": "Ваш электронный талон"
                },
                "service_name": {
                    "type": "string",
                    "example": "Записаться к врачу"
                },
                "ticket_number": {
                    "type": "string",
                    "example": "A001"
                },
                "timeout": {
                    "type": "integer",
                    "example": 10
                }
            }
        },
        "handlers.CreateDoctorRequest": {
            "type": "object",
            "required": [
                "full_name",
                "login",
                "password",
                "specialization"
            ],
            "properties": {
                "full_name": {
                    "type": "string"
                },
                "login": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                },
                "specialization": {
                    "type": "string"
                }
            }
        },
        "handlers.CreateRegistrarRequest": {
            "type": "object",
            "required": [
                "login",
                "password",
                "window_number"
            ],
            "properties": {
                "login": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                },
                "window_number": {
                    "type": "integer"
                }
            }
        },
        "handlers.DoctorScreenResponse": {
            "type": "object",
            "properties": {
                "cabinet_number": {
                    "type": "integer"
                },
                "doctor_name": {
                    "type": "string"
                },
                "doctor_specialty": {
                    "type": "string"
                },
                "message": {
                    "type": "string"
                },
                "queue": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.DoctorQueueTicketResponse"
                    }
                }
            }
        },
        "handlers.EndBreakRequest": {
            "type": "object",
            "required": [
                "doctor_id"
            ],
            "properties": {
                "doctor_id": {
                    "type": "integer",
                    "example": 1
                }
            }
        },
        "handlers.LoginRequest": {
            "type": "object",
            "required": [
                "login",
                "password"
            ],
            "properties": {
                "login": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                }
            }
        },
        "handlers.ServiceSelectionRequest": {
            "description": "Запрос для выбора услуги",
            "type": "object",
            "required": [
                "service_id"
            ],
            "properties": {
                "service_id": {
                    "type": "string",
                    "example": "make_appointment"
                }
            }
        },
        "handlers.ServiceSelectionResponse": {
            "description": "Ответ после выбора услуги",
            "type": "object",
            "properties": {
                "action": {
                    "type": "string",
                    "example": "confirm_print"
                },
                "service_name": {
                    "type": "string",
                    "example": "Записаться к врачу"
                }
            }
        },
        "handlers.SetActiveRequest": {
            "type": "object",
            "required": [
                "doctor_id"
            ],
            "properties": {
                "doctor_id": {
                    "type": "integer",
                    "example": 1
                }
            }
        },
        "handlers.SetInactiveRequest": {
            "type": "object",
            "required": [
                "doctor_id"
            ],
            "properties": {
                "doctor_id": {
                    "type": "integer",
                    "example": 1
                }
            }
        },
        "handlers.StartAppointmentRequest": {
            "type": "object",
            "required": [
                "ticket_id"
            ],
            "properties": {
                "ticket_id": {
                    "type": "integer",
                    "example": 1
                }
            }
        },
        "handlers.StartBreakRequest": {
            "type": "object",
            "required": [
                "doctor_id"
            ],
            "properties": {
                "doctor_id": {
                    "type": "integer",
                    "example": 1
                }
            }
        },
        "handlers.UpdateStatusRequest": {
            "description": "Запрос для смены статуса тикета",
            "type": "object",
            "required": [
                "status"
            ],
            "properties": {
                "status": {
                    "type": "string"
                }
            }
        },
        "models.Appointment": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "patient": {
                    "$ref": "#/definitions/models.Patient"
                },
                "patient_id": {
                    "type": "integer"
                },
                "schedule": {
                    "$ref": "#/definitions/models.Schedule"
                },
                "schedule_id": {
                    "type": "integer"
                },
                "ticket": {
                    "$ref": "#/definitions/models.Ticket"
                },
                "ticket_id": {
                    "type": "integer"
                }
            }
        },
        "models.CreateAppointmentRequest": {
            "type": "object",
            "required": [
                "patient_id",
                "schedule_id"
            ],
            "properties": {
                "patient_id": {
                    "type": "integer"
                },
                "schedule_id": {
                    "type": "integer"
                },
                "ticket_id": {
                    "type": "integer"
                }
            }
        },
        "models.CreatePatientRequest": {
            "type": "object",
            "required": [
                "birth_date",
                "full_name",
                "oms_number",
                "passport_number",
                "passport_series"
            ],
            "properties": {
                "birth_date": {
                    "type": "string"
                },
                "full_name": {
                    "type": "string"
                },
                "oms_number": {
                    "type": "string"
                },
                "passport_number": {
                    "type": "string"
                },
                "passport_series": {
                    "type": "string"
                },
                "phone": {
                    "type": "string"
                }
            }
        },
        "models.CreateScheduleRequest": {
            "type": "object",
            "required": [
                "date",
                "doctor_id",
                "end_time",
                "start_time"
            ],
            "properties": {
                "cabinet": {
                    "type": "integer",
                    "example": 101
                },
                "date": {
                    "type": "string",
                    "example": "2025-07-20T00:00:00Z"
                },
                "doctor_id": {
                    "type": "integer",
                    "example": 1
                },
                "end_time": {
                    "type": "string",
                    "example": "2025-01-01T10:00:00Z"
                },
                "is_available": {
                    "type": "boolean",
                    "example": true
                },
                "start_time": {
                    "type": "string",
                    "example": "2025-01-01T09:00:00Z"
                }
            }
        },
        "models.DeleteRequest": {
            "type": "object",
            "required": [
                "filters"
            ],
            "properties": {
                "filters": {
                    "$ref": "#/definitions/models.Filters"
                }
            }
        },
        "models.Doctor": {
            "type": "object",
            "properties": {
                "full_name": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "login": {
                    "type": "string"
                },
                "schedules": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.Schedule"
                    }
                },
                "specialization": {
                    "type": "string"
                },
                "status": {
                    "$ref": "#/definitions/models.DoctorStatus"
                }
            }
        },
        "models.DoctorQueueTicketResponse": {
            "type": "object",
            "properties": {
                "patient_full_name": {
                    "type": "string"
                },
                "start_time": {
                    "type": "string"
                },
                "status": {
                    "$ref": "#/definitions/models.TicketStatus"
                },
                "ticket_number": {
                    "type": "string"
                }
            }
        },
        "models.DoctorStatus": {
            "type": "string",
            "enum": [
                "активен",
                "неактивен",
                "перерыв"
            ],
            "x-enum-varnames": [
                "DoctorStatusActive",
                "DoctorStatusInactive",
                "DoctorStatusOnBreak"
            ]
        },
        "models.FilterCondition": {
            "type": "object",
            "properties": {
                "field": {
                    "type": "string"
                },
                "operator": {
                    "type": "string"
                },
                "value": {}
            }
        },
        "models.Filters": {
            "type": "object",
            "properties": {
                "conditions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.FilterCondition"
                    }
                },
                "logical_operator": {
                    "type": "string"
                }
            }
        },
        "models.GetDataRequest": {
            "type": "object",
            "properties": {
                "filters": {
                    "$ref": "#/definitions/models.Filters"
                },
                "limit": {
                    "type": "integer"
                },
                "page": {
                    "type": "integer"
                }
            }
        },
        "models.InsertRequest": {
            "type": "object",
            "required": [
                "data"
            ],
            "properties": {
                "data": {}
            }
        },
        "models.Patient": {
            "type": "object",
            "properties": {
                "birth_date": {
                    "type": "string"
                },
                "full_name": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "oms_number": {
                    "type": "string"
                },
                "passport_number": {
                    "type": "string"
                },
                "passport_series": {
                    "type": "string"
                },
                "phone": {
                    "type": "string"
                }
            }
        },
        "models.Schedule": {
            "type": "object",
            "properties": {
                "cabinet": {
                    "type": "integer"
                },
                "date": {
                    "type": "string"
                },
                "doctor": {
                    "$ref": "#/definitions/models.Doctor"
                },
                "doctor_id": {
                    "type": "integer"
                },
                "end_time": {
                    "type": "string"
                },
                "is_available": {
                    "type": "boolean"
                },
                "schedule_id": {
                    "type": "integer"
                },
                "start_time": {
                    "type": "string"
                }
            }
        },
        "models.ScheduleWithAppointmentInfo": {
            "type": "object",
            "properties": {
                "appointment": {
                    "$ref": "#/definitions/models.Appointment"
                },
                "cabinet": {
                    "type": "integer"
                },
                "date": {
                    "type": "string"
                },
                "doctor": {
                    "$ref": "#/definitions/models.Doctor"
                },
                "doctor_id": {
                    "type": "integer"
                },
                "end_time": {
                    "type": "string"
                },
                "is_available": {
                    "type": "boolean"
                },
                "schedule_id": {
                    "type": "integer"
                },
                "start_time": {
                    "type": "string"
                }
            }
        },
        "models.Service": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string"
                },
                "letter": {
                    "type": "string"
                },
                "title": {
                    "type": "string"
                }
            }
        },
        "models.Ticket": {
            "description": "Модель талона электронной очереди",
            "type": "object",
            "properties": {
                "called_at": {
                    "type": "string"
                },
                "completed_at": {
                    "type": "string"
                },
                "created_at": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "qr_code": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "service_type": {
                    "type": "string"
                },
                "started_at": {
                    "type": "string"
                },
                "status": {
                    "$ref": "#/definitions/models.TicketStatus"
                },
                "ticket_number": {
                    "type": "string"
                },
                "window_number": {
                    "type": "integer"
                }
            }
        },
        "models.TicketResponse": {
            "description": "Ответ API с данными талона",
            "type": "object",
            "properties": {
                "called_at": {
                    "type": "string"
                },
                "completed_at": {
                    "type": "string"
                },
                "created_at": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "qr_code": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "service_type": {
                    "type": "string"
                },
                "started_at": {
                    "type": "string"
                },
                "status": {
                    "$ref": "#/definitions/models.TicketStatus"
                },
                "ticket_number": {
                    "type": "string"
                },
                "window_number": {
                    "type": "integer"
                }
            }
        },
        "models.TicketStatus": {
            "type": "string",
            "enum": [
                "ожидает",
                "приглашен",
                "на_приеме",
                "завершен",
                "зарегистрирован"
            ],
            "x-enum-comments": {
                "StatusInvited": "Пациент вызван к окну"
            },
            "x-enum-descriptions": [
                "Пациент вызван к окну"
            ],
            "x-enum-varnames": [
                "StatusWaiting",
                "StatusInvited",
                "StatusInProgress",
                "StatusCompleted",
                "StatusRegistered"
            ]
        },
        "models.UpdateRequest": {
            "type": "object",
            "required": [
                "data",
                "filters"
            ],
            "properties": {
                "data": {
                    "type": "object",
                    "additionalProperties": true
                },
                "filters": {
                    "$ref": "#/definitions/models.Filters"
                }
            }
        }
    },
    "securityDefinitions": {
        "ApiKeyAuth": {
            "type": "apiKey",
            "name": "X-API-KEY",
            "in": "header"
        }
    }
}